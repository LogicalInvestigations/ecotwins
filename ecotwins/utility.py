# AUTOGENERATED! DO NOT EDIT! File to edit: utility.ipynb (unless otherwise specified).

__all__ = ['distance', 'normalize', 'draw_objects', 'motion_diagram']

# Cell
import numpy as np
import matplotlib.pyplot as plt

# Cell
# Computes the distances from position to objects.
def distance(position,objects):
    # return np.sqrt(((objects - position) ** 2).sum(axis=-1, keepdims=True))
    return np.sqrt(((objects - position) ** 2).sum(axis=-1 ))

# Cell
def normalize(objects):
    dist = distance(0, objects)
    if isinstance(dist, np.ndarray):
        for i in range(dist.shape[0]):
            if dist[i] == 0: dist[i] = 1.0e-10
    else:
        dist = np.full(1, dist if dist else 1.0e-10)
        return objects / dist

    return objects/dist[..., None]

# Cell
# Draw objects
def draw_objects(objects, side=20):

    # Add coordinate system
    fig, ax = plt.subplots(figsize=(9,9))
    ax.axis([-side/2, side/2, -side/2, side/2])
    ax.set_aspect('equal')
    plt.grid()

    # Add labels
    ax.set_xlabel('X-coordinate')
    ax.set_ylabel('Y-coordinate')
    #plt.title('World')

    # Add objects
    ax.scatter(objects[:,0],objects[:,1], marker='x', c='Black') #Red

    # Add agent
    #plt.scatter(position[0], position[1], marker='x', c='Black')

    return fig, ax

# Cell
def motion_diagram(objects,trace, side=20):

    draw_objects(objects, side)
    plt.plot(trace[:,0], trace[:,1])
    plt.scatter(trace[0,0], trace[0,1], marker='x', c='Red')

    plt.title("Motion diagram")